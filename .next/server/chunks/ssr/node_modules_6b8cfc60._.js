module.exports = {

"[project]/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react-jsx-dev-runtime.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, d: __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
module.exports = __turbopack_context__.r("[project]/node_modules/next/dist/server/route-modules/app-page/module.compiled.js [app-rsc] (ecmascript)").vendored['react-rsc'].ReactJsxDevRuntime; //# sourceMappingURL=react-jsx-dev-runtime.js.map
}}),
"[project]/node_modules/next/dist/client/script.js (client reference/proxy) <module evaluation>": (function(__turbopack_context__) {

var { g: global, d: __dirname, m: module, e: exports } = __turbopack_context__;
{
const { createClientModuleProxy } = __turbopack_context__.r("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react-server-dom-turbopack-server-edge.js [app-rsc] (ecmascript)");
__turbopack_context__.n(createClientModuleProxy("[project]/node_modules/next/dist/client/script.js <module evaluation>"));
}}),
"[project]/node_modules/next/dist/client/script.js (client reference/proxy)": (function(__turbopack_context__) {

var { g: global, d: __dirname, m: module, e: exports } = __turbopack_context__;
{
const { createClientModuleProxy } = __turbopack_context__.r("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react-server-dom-turbopack-server-edge.js [app-rsc] (ecmascript)");
__turbopack_context__.n(createClientModuleProxy("[project]/node_modules/next/dist/client/script.js"));
}}),
"[project]/node_modules/next/dist/client/script.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$script$2e$js__$28$client__reference$2f$proxy$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/next/dist/client/script.js (client reference/proxy) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$script$2e$js__$28$client__reference$2f$proxy$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/client/script.js (client reference/proxy)");
;
__turbopack_context__.n(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$script$2e$js__$28$client__reference$2f$proxy$29$__);
}}),
"[project]/node_modules/next/script.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, d: __dirname, m: module, e: exports } = __turbopack_context__;
{
module.exports = __turbopack_context__.r("[project]/node_modules/next/dist/client/script.js [app-rsc] (ecmascript)");
}}),
"[project]/node_modules/@prismicio/client/dist/errors/PrismicError.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "PrismicError": (()=>PrismicError)
});
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {
        enumerable: true,
        configurable: true,
        writable: true,
        value
    }) : obj[key] = value;
var __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
class PrismicError extends Error {
    constructor(message = "An invalid API response was returned", url, response){
        super(message);
        __publicField(this, "url");
        __publicField(this, "response");
        this.url = url;
        this.response = response;
    }
}
;
 //# sourceMappingURL=PrismicError.js.map
}}),
"[project]/node_modules/@prismicio/client/dist/isRepositoryName.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "isRepositoryName": (()=>isRepositoryName)
});
const isRepositoryName = (input)=>{
    return /^[a-zA-Z0-9][-a-zA-Z0-9]{2,}[a-zA-Z0-9]$/.test(input);
};
;
 //# sourceMappingURL=isRepositoryName.js.map
}}),
"[project]/node_modules/@prismicio/client/dist/getToolbarSrc.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "getToolbarSrc": (()=>getToolbarSrc)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$PrismicError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/errors/PrismicError.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$isRepositoryName$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/isRepositoryName.js [app-rsc] (ecmascript)");
;
;
const getToolbarSrc = (repositoryName)=>{
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$isRepositoryName$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["isRepositoryName"])(repositoryName)) {
        return `https://static.cdn.prismic.io/prismic.js?new=true&repo=${repositoryName}`;
    } else {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$PrismicError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["PrismicError"](`An invalid Prismic repository name was given: ${repositoryName}`, void 0, void 0);
    }
};
;
 //# sourceMappingURL=getToolbarSrc.js.map
}}),
"[project]/node_modules/@prismicio/next/dist/PrismicPreviewClient.js (client reference/proxy) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "PrismicPreviewClient": (()=>PrismicPreviewClient)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$server$2d$dom$2d$turbopack$2d$server$2d$edge$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react-server-dom-turbopack-server-edge.js [app-rsc] (ecmascript)");
;
const PrismicPreviewClient = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$server$2d$dom$2d$turbopack$2d$server$2d$edge$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["registerClientReference"])(function() {
    throw new Error("Attempted to call PrismicPreviewClient() from the server but PrismicPreviewClient is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.");
}, "[project]/node_modules/@prismicio/next/dist/PrismicPreviewClient.js <module evaluation>", "PrismicPreviewClient");
}}),
"[project]/node_modules/@prismicio/next/dist/PrismicPreviewClient.js (client reference/proxy)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "PrismicPreviewClient": (()=>PrismicPreviewClient)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$server$2d$dom$2d$turbopack$2d$server$2d$edge$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react-server-dom-turbopack-server-edge.js [app-rsc] (ecmascript)");
;
const PrismicPreviewClient = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$server$2d$dom$2d$turbopack$2d$server$2d$edge$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["registerClientReference"])(function() {
    throw new Error("Attempted to call PrismicPreviewClient() from the server but PrismicPreviewClient is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.");
}, "[project]/node_modules/@prismicio/next/dist/PrismicPreviewClient.js", "PrismicPreviewClient");
}}),
"[project]/node_modules/@prismicio/next/dist/PrismicPreviewClient.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$next$2f$dist$2f$PrismicPreviewClient$2e$js__$28$client__reference$2f$proxy$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/next/dist/PrismicPreviewClient.js (client reference/proxy) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$next$2f$dist$2f$PrismicPreviewClient$2e$js__$28$client__reference$2f$proxy$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/next/dist/PrismicPreviewClient.js (client reference/proxy)");
;
__turbopack_context__.n(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$next$2f$dist$2f$PrismicPreviewClient$2e$js__$28$client__reference$2f$proxy$29$__);
}}),
"[project]/node_modules/@prismicio/next/dist/PrismicPreview.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "PrismicPreview": (()=>PrismicPreview)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react-jsx-runtime.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$script$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/script.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$getToolbarSrc$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/getToolbarSrc.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$next$2f$dist$2f$PrismicPreviewClient$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/next/dist/PrismicPreviewClient.js [app-rsc] (ecmascript)");
;
;
;
;
const PrismicPreview = async (props)=>{
    const { repositoryName, children, ...otherProps } = props;
    const { draftMode } = await __turbopack_context__.r("[project]/node_modules/next/headers.js [app-rsc] (ecmascript, async loader)")(__turbopack_context__.i);
    const toolbarSrc = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$getToolbarSrc$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getToolbarSrc"])(repositoryName);
    const isDraftMode = (await draftMode()).isEnabled;
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxs"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Fragment"], {
        children: [
            children,
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$next$2f$dist$2f$PrismicPreviewClient$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["PrismicPreviewClient"], {
                repositoryName,
                isDraftMode,
                ...otherProps
            }),
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$script$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"], {
                src: toolbarSrc,
                strategy: "lazyOnload"
            })
        ]
    });
};
;
 //# sourceMappingURL=PrismicPreview.js.map
}}),
"[project]/node_modules/@prismicio/client/dist/lib/castArray.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "castArray": (()=>castArray)
});
const castArray = (a)=>{
    return Array.isArray(a) ? a : [
        a
    ];
};
;
 //# sourceMappingURL=castArray.js.map
}}),
"[project]/node_modules/@prismicio/client/dist/lib/appendFilters.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "appendFilters": (()=>appendFilters)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$castArray$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/lib/castArray.js [app-rsc] (ecmascript)");
;
const appendFilters = (objWithFilters = {}, filters)=>{
    return {
        ...objWithFilters,
        filters: [
            ...objWithFilters.filters || [],
            ...(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$castArray$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["castArray"])(filters)
        ]
    };
};
;
 //# sourceMappingURL=appendFilters.js.map
}}),
"[project]/node_modules/@prismicio/client/dist/lib/castThunk.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "castThunk": (()=>castThunk)
});
const castThunk = (a)=>{
    return typeof a === "function" ? a : ()=>a;
};
;
 //# sourceMappingURL=castThunk.js.map
}}),
"[project]/node_modules/@prismicio/client/dist/package.json.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "version": (()=>version)
});
const version = "7.16.1";
;
 //# sourceMappingURL=package.json.js.map
}}),
"[project]/node_modules/@prismicio/client/dist/lib/devMsg.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "devMsg": (()=>devMsg)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$package$2e$json$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/package.json.js [app-rsc] (ecmascript)");
;
const devMsg = (slug)=>{
    return `https://prismic.dev/msg/client/v${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$package$2e$json$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["version"]}/${slug}`;
};
;
 //# sourceMappingURL=devMsg.js.map
}}),
"[project]/node_modules/@prismicio/client/dist/filter.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "filter": (()=>filter)
});
const formatValue = (value)=>{
    if (Array.isArray(value)) {
        return `[${value.map(formatValue).join(", ")}]`;
    }
    if (typeof value === "string") {
        return `"${value}"`;
    }
    if (value instanceof Date) {
        return `${value.getTime()}`;
    }
    return `${value}`;
};
const pathWithArgsFilter = (name)=>{
    const fn = (path, ...args)=>{
        const formattedArgs = args.map(formatValue).join(", ");
        const joiner = path && args.length ? ", " : "";
        return `[${name}(${path}${joiner}${formattedArgs})]`;
    };
    return fn;
};
const pathFilter = (name)=>{
    const filterFn = pathWithArgsFilter(name);
    const fn = (path)=>{
        return filterFn(path);
    };
    return fn;
};
const argsFilter = (name)=>{
    const filterFn = pathWithArgsFilter(name);
    const fn = (...args)=>{
        return filterFn("", ...args);
    };
    return fn;
};
const filter = {
    /**
   * The `at` filter checks that the path matches the described value exactly.
   * It takes a single value for a field or an array (only for tags).
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#at}
   */ at: pathWithArgsFilter("at"),
    /**
   * The `not` filter checks that the path doesn't match the provided value
   * exactly. It takes a single value for a field or an array (only for tags).
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#not}
   */ not: pathWithArgsFilter("not"),
    /**
   * The `any` filter takes an array of values. It works exactly the same way as
   * the `at` operator, but checks whether the fragment matches any of the
   * values in the array.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#any}
   */ any: pathWithArgsFilter("any"),
    /**
   * The `in` filter is used specifically to retrieve an array of documents by
   * their IDs or UIDs. This filter is much more efficient at this than the any
   * filter.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#in}
   */ in: pathWithArgsFilter("in"),
    /**
   * The `fulltext` filter provides two capabilities:
   *
   * 1. Checking if a certain string is anywhere inside a document (this is what
   *    you should use to make your project's search engine feature)
   * 2. Checking if the string is contained inside a specific custom type’s Rich
   *    Text or Key Text fragment.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#fulltext}
   */ fulltext: pathWithArgsFilter("fulltext"),
    /**
   * The `has` filter checks whether a fragment has a value. It will return all
   * the documents of the specified type that contain a value for the specified
   * field.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#has}
   */ has: pathFilter("has"),
    /**
   * The `missing` filter checks if a fragment doesn't have a value. It will
   * return all the documents of the specified type that do not contain a value
   * for the specified field.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#missing}
   */ missing: pathFilter("missing"),
    /**
   * The `similar` filter takes the ID of a document, and returns a list of
   * documents with similar content. This allows you to build an automated
   * content discovery feature (for example, a "Related posts" section).
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#similar}
   */ similar: argsFilter("similar"),
    /**
   * The `geopoint.near` filter checks that the value in the path is within the
   * radius of the given coordinates.
   *
   * This filter will only work for a geopoint field.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#geopointnear}
   */ geopointNear: pathWithArgsFilter("geopoint.near"),
    /**
   * The `number.lt` filter checks that the value in the number field is less
   * than the value passed into the filter.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#numberlessthan}
   */ numberLessThan: pathWithArgsFilter("number.lt"),
    /**
   * The `number.gt` filter checks that the value in the number field is greater
   * than the value passed into the filter.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#numbergreaterthan}
   */ numberGreaterThan: pathWithArgsFilter("number.gt"),
    /**
   * The `number.inRange` filter checks that the value in the path is within the
   * two values passed into the filter.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#numberinrange}
   */ numberInRange: pathWithArgsFilter("number.inRange"),
    /**
   * The `date.after` filter checks that the value in the path is after the date
   * value passed into the filter.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#date-filters}
   */ dateAfter: pathWithArgsFilter("date.after"),
    /**
   * The `date.before` filter checks that the value in the path is before the
   * date value passed into the filter.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#date-filters}
   */ dateBefore: pathWithArgsFilter("date.before"),
    /**
   * The `date.between` filter checks that the value in the path is within the
   * date values passed into the filter.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#date-filters}
   */ dateBetween: pathWithArgsFilter("date.between"),
    /**
   * The `date.day-of-month` filter checks that the value in the path is equal
   * to the day of the month passed into the filter.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#date-filters}
   */ dateDayOfMonth: pathWithArgsFilter("date.day-of-month"),
    /**
   * The `date.day-of-month-after` filter checks that the value in the path is
   * after the day of the month passed into the filter.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#date-filters}
   */ dateDayOfMonthAfter: pathWithArgsFilter("date.day-of-month-after"),
    /**
   * The `date.day-of-month-before` filter checks that the value in the path is
   * before the day of the month passed into the filter.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#date-filters}
   */ dateDayOfMonthBefore: pathWithArgsFilter("date.day-of-month-before"),
    /**
   * The `date.day-of-week` filter checks that the value in the path is equal to
   * the day of the week passed into the filter.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#date-filters}
   */ dateDayOfWeek: pathWithArgsFilter("date.day-of-week"),
    /**
   * The `date.day-of-week-after` filter checks that the value in the path is
   * after the day of the week passed into the filter.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#date-filters}
   */ dateDayOfWeekAfter: pathWithArgsFilter("date.day-of-week-after"),
    /**
   * The date.day-of-week-before filter checks that the value in the path is
   * before the day of the week passed into the filter.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#date-filters}
   */ dateDayOfWeekBefore: pathWithArgsFilter("date.day-of-week-before"),
    /**
   * The `date.month` filter checks that the value in the path occurs in the
   * month value passed into the filter.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#date-filters}
   */ dateMonth: pathWithArgsFilter("date.month"),
    /**
   * The `date.month-after` filter checks that the value in the path occurs in
   * any month after the value passed into the filter.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#date-filters}
   */ dateMonthAfter: pathWithArgsFilter("date.month-after"),
    /**
   * The `date.month-before` filter checks that the value in the path occurs in
   * any month before the value passed into the filter.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#date-filters}
   */ dateMonthBefore: pathWithArgsFilter("date.month-before"),
    /**
   * The `date.year` filter checks that the value in the path occurs in the year
   * value passed into the filter.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#date-filters}
   */ dateYear: pathWithArgsFilter("date.year"),
    /**
   * The `date.hour` filter checks that the value in the path occurs within the
   * hour value passed into the filter.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#date-filters}
   */ dateHour: pathWithArgsFilter("date.hour"),
    /**
   * The `date.hour-after` filter checks that the value in the path occurs after
   * the hour value passed into the filter.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#date-filters}
   */ dateHourAfter: pathWithArgsFilter("date.hour-after"),
    /**
   * The `date.hour-before` filter checks that the value in the path occurs
   * before the hour value passed into the filter.
   *
   * {@link https://prismic.io/docs/rest-api-technical-reference#date-filters}
   */ dateHourBefore: pathWithArgsFilter("date.hour-before")
};
;
 //# sourceMappingURL=filter.js.map
}}),
"[project]/node_modules/@prismicio/client/dist/lib/everyTagFilter.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "everyTagFilter": (()=>everyTagFilter)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$filter$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/filter.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$castArray$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/lib/castArray.js [app-rsc] (ecmascript)");
;
;
const everyTagFilter = (tags)=>{
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$filter$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["filter"].at("document.tags", (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$castArray$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["castArray"])(tags));
};
;
 //# sourceMappingURL=everyTagFilter.js.map
}}),
"[project]/node_modules/@prismicio/client/dist/lib/findRef.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "findRef": (()=>findRef)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$PrismicError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/errors/PrismicError.js [app-rsc] (ecmascript)");
;
const findRef = (refs, filter)=>{
    const ref = refs.find((ref2)=>filter(ref2));
    if (!ref) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$PrismicError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["PrismicError"]("Ref could not be found.", void 0, void 0);
    }
    return ref;
};
;
 //# sourceMappingURL=findRef.js.map
}}),
"[project]/node_modules/@prismicio/client/dist/lib/findMasterRef.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "findMasterRef": (()=>findMasterRef)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$findRef$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/lib/findRef.js [app-rsc] (ecmascript)");
;
const findMasterRef = (refs)=>{
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$findRef$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["findRef"])(refs, (ref)=>ref.isMasterRef);
};
;
 //# sourceMappingURL=findMasterRef.js.map
}}),
"[project]/node_modules/@prismicio/client/dist/lib/findRefByID.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "findRefByID": (()=>findRefByID)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$findRef$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/lib/findRef.js [app-rsc] (ecmascript)");
;
const findRefByID = (refs, id)=>{
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$findRef$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["findRef"])(refs, (ref)=>ref.id === id);
};
;
 //# sourceMappingURL=findRefByID.js.map
}}),
"[project]/node_modules/@prismicio/client/dist/lib/findRefByLabel.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "findRefByLabel": (()=>findRefByLabel)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$findRef$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/lib/findRef.js [app-rsc] (ecmascript)");
;
const findRefByLabel = (refs, label)=>{
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$findRef$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["findRef"])(refs, (ref)=>ref.label === label);
};
;
 //# sourceMappingURL=findRefByLabel.js.map
}}),
"[project]/node_modules/@prismicio/client/dist/cookie.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "preview": (()=>preview)
});
const preview = "io.prismic.preview";
;
 //# sourceMappingURL=cookie.js.map
}}),
"[project]/node_modules/@prismicio/client/dist/lib/getPreviewCookie.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "getPreviewCookie": (()=>getPreviewCookie)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$cookie$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/cookie.js [app-rsc] (ecmascript)");
;
const readValue = (value)=>{
    return value.replace(/%3B/g, ";");
};
const getPreviewCookie = (cookieJar)=>{
    const cookies = cookieJar.split("; ");
    let value;
    for (const cookie of cookies){
        const parts = cookie.split("=");
        const name = readValue(parts[0]).replace(/%3D/g, "=");
        if (name === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$cookie$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["preview"]) {
            value = readValue(parts.slice(1).join("="));
            break;
        }
    }
    return value;
};
;
 //# sourceMappingURL=getPreviewCookie.js.map
}}),
"[project]/node_modules/@prismicio/client/dist/lib/minifyGraphQLQuery.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "minifyGraphQLQuery": (()=>minifyGraphQLQuery)
});
const minifyGraphQLQuery = (query)=>{
    return query.replace(/(\n| )*( |{|})(\n| )*/gm, (_chars, _spaces, brackets)=>brackets);
};
;
 //# sourceMappingURL=minifyGraphQLQuery.js.map
}}),
"[project]/node_modules/@prismicio/client/dist/lib/someTagsFilter.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "someTagsFilter": (()=>someTagsFilter)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$filter$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/filter.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$castArray$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/lib/castArray.js [app-rsc] (ecmascript)");
;
;
const someTagsFilter = (tags)=>{
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$filter$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["filter"].any("document.tags", (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$castArray$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["castArray"])(tags));
};
;
 //# sourceMappingURL=someTagsFilter.js.map
}}),
"[project]/node_modules/@prismicio/client/dist/lib/typeFilter.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "typeFilter": (()=>typeFilter)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$filter$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/filter.js [app-rsc] (ecmascript)");
;
const typeFilter = (documentType)=>{
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$filter$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["filter"].at("document.type", documentType);
};
;
 //# sourceMappingURL=typeFilter.js.map
}}),
"[project]/node_modules/@prismicio/client/dist/errors/ForbiddenError.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ForbiddenError": (()=>ForbiddenError)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$PrismicError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/errors/PrismicError.js [app-rsc] (ecmascript)");
;
class ForbiddenError extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$PrismicError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["PrismicError"] {
}
;
 //# sourceMappingURL=ForbiddenError.js.map
}}),
"[project]/node_modules/@prismicio/client/dist/errors/NotFoundError.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "NotFoundError": (()=>NotFoundError)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$PrismicError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/errors/PrismicError.js [app-rsc] (ecmascript)");
;
class NotFoundError extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$PrismicError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["PrismicError"] {
}
;
 //# sourceMappingURL=NotFoundError.js.map
}}),
"[project]/node_modules/@prismicio/client/dist/errors/ParsingError.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ParsingError": (()=>ParsingError)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$PrismicError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/errors/PrismicError.js [app-rsc] (ecmascript)");
;
class ParsingError extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$PrismicError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["PrismicError"] {
}
;
 //# sourceMappingURL=ParsingError.js.map
}}),
"[project]/node_modules/@prismicio/client/dist/errors/PreviewTokenExpired.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "PreviewTokenExpiredError": (()=>PreviewTokenExpiredError)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$ForbiddenError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/errors/ForbiddenError.js [app-rsc] (ecmascript)");
;
class PreviewTokenExpiredError extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$ForbiddenError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ForbiddenError"] {
}
;
 //# sourceMappingURL=PreviewTokenExpired.js.map
}}),
"[project]/node_modules/@prismicio/client/dist/errors/RefExpiredError.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "RefExpiredError": (()=>RefExpiredError)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$ForbiddenError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/errors/ForbiddenError.js [app-rsc] (ecmascript)");
;
class RefExpiredError extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$ForbiddenError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ForbiddenError"] {
}
;
 //# sourceMappingURL=RefExpiredError.js.map
}}),
"[project]/node_modules/@prismicio/client/dist/errors/RefNotFoundError.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "RefNotFoundError": (()=>RefNotFoundError)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$ForbiddenError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/errors/ForbiddenError.js [app-rsc] (ecmascript)");
;
class RefNotFoundError extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$ForbiddenError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ForbiddenError"] {
}
;
 //# sourceMappingURL=RefNotFoundError.js.map
}}),
"[project]/node_modules/@prismicio/client/dist/errors/RepositoryNotFoundError.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "RepositoryNotFoundError": (()=>RepositoryNotFoundError)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$NotFoundError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/errors/NotFoundError.js [app-rsc] (ecmascript)");
;
class RepositoryNotFoundError extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$NotFoundError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["NotFoundError"] {
}
;
 //# sourceMappingURL=RepositoryNotFoundError.js.map
}}),
"[project]/node_modules/@prismicio/client/dist/types/value/link.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "LinkType": (()=>LinkType)
});
const LinkType = {
    Any: "Any",
    Document: "Document",
    Media: "Media",
    Web: "Web"
};
;
 //# sourceMappingURL=link.js.map
}}),
"[project]/node_modules/@prismicio/client/dist/helpers/documentToLinkField.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "documentToLinkField": (()=>documentToLinkField)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$types$2f$value$2f$link$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/types/value/link.js [app-rsc] (ecmascript)");
;
const documentToLinkField = (prismicDocument)=>{
    var _a;
    return {
        link_type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$types$2f$value$2f$link$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["LinkType"].Document,
        id: prismicDocument.id,
        uid: prismicDocument.uid || void 0,
        type: prismicDocument.type,
        tags: prismicDocument.tags,
        lang: prismicDocument.lang,
        url: prismicDocument.url == null ? void 0 : prismicDocument.url,
        slug: (_a = prismicDocument.slugs) == null ? void 0 : _a[0],
        // Slug field is not available with GraphQL
        // The REST API does not include a `data` property if the data
        // object is empty.
        //
        // A presence check for `prismicDocument.data` is done to
        // support partial documents. While `documentToLinkField` is
        // not typed to accept partial documents, passing a partial
        // document can happen in untyped projects.
        ...prismicDocument.data && Object.keys(prismicDocument.data).length > 0 ? {
            data: prismicDocument.data
        } : {}
    };
};
;
 //# sourceMappingURL=documentToLinkField.js.map
}}),
"[project]/node_modules/@prismicio/client/dist/helpers/asLink.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "asLink": (()=>asLink)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$types$2f$value$2f$link$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/types/value/link.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$helpers$2f$documentToLinkField$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/helpers/documentToLinkField.js [app-rsc] (ecmascript)");
;
;
const asLink = (linkFieldOrDocument, ...configObjectOrTuple)=>{
    if (!linkFieldOrDocument) {
        return null;
    }
    const linkField = // prettier-ignore
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore - Bug in TypeScript 4.9: https://github.com/microsoft/TypeScript/issues/51501
    // TODO: Remove the `prettier-ignore` comment when this bug is fixed.
    "link_type" in linkFieldOrDocument ? linkFieldOrDocument : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$helpers$2f$documentToLinkField$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["documentToLinkField"])(linkFieldOrDocument);
    const [configObjectOrLinkResolver] = configObjectOrTuple;
    let config;
    if (typeof configObjectOrLinkResolver === "function" || configObjectOrLinkResolver == null) {
        config = {
            linkResolver: configObjectOrLinkResolver
        };
    } else {
        config = {
            ...configObjectOrLinkResolver
        };
    }
    switch(linkField.link_type){
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$types$2f$value$2f$link$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["LinkType"].Media:
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$types$2f$value$2f$link$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["LinkType"].Web:
            return "url" in linkField ? linkField.url : null;
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$types$2f$value$2f$link$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["LinkType"].Document:
            {
                if ("id" in linkField && config.linkResolver) {
                    const resolvedURL = config.linkResolver(linkField);
                    if (resolvedURL != null) {
                        return resolvedURL;
                    }
                }
                if ("url" in linkField && linkField.url) {
                    return linkField.url;
                }
                return null;
            }
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$types$2f$value$2f$link$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["LinkType"].Any:
        default:
            return null;
    }
};
;
 //# sourceMappingURL=asLink.js.map
}}),
"[project]/node_modules/@prismicio/client/dist/lib/pLimit.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "pLimit": (()=>pLimit)
});
const sleep = (ms)=>new Promise((resolve)=>setTimeout(resolve, ms));
const pLimit = ({ interval } = {})=>{
    const queue = [];
    let busy = false;
    let lastCompletion = 0;
    const resumeNext = ()=>{
        var _a;
        if (!busy && queue.length > 0) {
            (_a = queue.shift()) == null ? void 0 : _a();
            busy = true;
        }
    };
    const next = ()=>{
        busy = false;
        resumeNext();
    };
    const run = async (function_, resolve, arguments_)=>{
        const timeSinceLastCompletion = Date.now() - lastCompletion;
        if (interval && timeSinceLastCompletion < interval) {
            await sleep(interval - timeSinceLastCompletion);
        }
        const result = (async ()=>function_(...arguments_))();
        resolve(result);
        try {
            await result;
        } catch  {}
        lastCompletion = Date.now();
        next();
    };
    const enqueue = (function_, resolve, arguments_)=>{
        new Promise((internalResolve)=>{
            queue.push(internalResolve);
        }).then(run.bind(void 0, function_, resolve, arguments_));
        (async ()=>{
            await Promise.resolve();
            if (!busy) {
                resumeNext();
            }
        })();
    };
    return (function_, ...arguments_)=>new Promise((resolve)=>{
            enqueue(function_, resolve, arguments_);
        });
};
;
 //# sourceMappingURL=pLimit.js.map
}}),
"[project]/node_modules/@prismicio/client/dist/BaseClient.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "BaseClient": (()=>BaseClient),
    "UNKNOWN_RATE_LIMIT_DELAY": (()=>UNKNOWN_RATE_LIMIT_DELAY)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$pLimit$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/lib/pLimit.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$PrismicError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/errors/PrismicError.js [app-rsc] (ecmascript)");
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {
        enumerable: true,
        configurable: true,
        writable: true,
        value
    }) : obj[key] = value;
var __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
;
;
const UNKNOWN_RATE_LIMIT_DELAY = 1500;
class BaseClient {
    constructor(options){
        /**
     * The function used to make network requests to the Prismic REST API. In
     * environments where a global `fetch` function does not exist, such as
     * Node.js, this function must be provided.
     */ __publicField(this, "fetchFn");
        __publicField(this, "fetchOptions");
        /**
     * Active queued `fetch()` jobs keyed by URL and AbortSignal (if it exists).
     */ __publicField(this, "queuedFetchJobs", {});
        /**
     * Active deduped `fetch()` jobs keyed by URL and AbortSignal (if it exists).
     */ __publicField(this, "dedupedFetchJobs", {});
        this.fetchOptions = options.fetchOptions;
        if (typeof options.fetch === "function") {
            this.fetchFn = options.fetch;
        } else if (typeof globalThis.fetch === "function") {
            this.fetchFn = globalThis.fetch;
        } else {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$PrismicError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["PrismicError"]("A valid fetch implementation was not provided. In environments where fetch is not available (including Node.js), a fetch implementation must be provided via a polyfill or the `fetch` option.", void 0, void 0);
        }
        if (this.fetchFn === globalThis.fetch) {
            this.fetchFn = this.fetchFn.bind(globalThis);
        }
    }
    async fetch(url, params = {}) {
        var _a, _b, _c, _d, _e;
        const requestInit = {
            ...this.fetchOptions,
            ...params.fetchOptions,
            headers: {
                ...(_a = this.fetchOptions) == null ? void 0 : _a.headers,
                ...(_b = params.fetchOptions) == null ? void 0 : _b.headers
            },
            signal: ((_c = params.fetchOptions) == null ? void 0 : _c.signal) || params.signal || ((_d = this.fetchOptions) == null ? void 0 : _d.signal)
        };
        if ((_e = params.fetchOptions) == null ? void 0 : _e.body) {
            return this.queueFetch(url, requestInit);
        } else {
            return this.dedupeFetch(url, requestInit);
        }
    }
    queueFetch(url, requestInit = {}) {
        const hostname = new URL(url).hostname;
        if (!this.queuedFetchJobs[hostname]) {
            this.queuedFetchJobs[hostname] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$pLimit$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["pLimit"])({
                interval: UNKNOWN_RATE_LIMIT_DELAY
            });
        }
        return this.queuedFetchJobs[hostname](()=>this.createFetchJob(url, requestInit));
    }
    dedupeFetch(url, requestInit = {}) {
        let job;
        if (this.dedupedFetchJobs[url] && this.dedupedFetchJobs[url].has(requestInit.signal)) {
            job = this.dedupedFetchJobs[url].get(requestInit.signal);
        } else {
            this.dedupedFetchJobs[url] = this.dedupedFetchJobs[url] || /* @__PURE__ */ new Map();
            job = this.createFetchJob(url, requestInit).finally(()=>{
                var _a, _b;
                (_a = this.dedupedFetchJobs[url]) == null ? void 0 : _a.delete(requestInit.signal);
                if (((_b = this.dedupedFetchJobs[url]) == null ? void 0 : _b.size) === 0) {
                    delete this.dedupedFetchJobs[url];
                }
            });
            this.dedupedFetchJobs[url].set(requestInit.signal, job);
        }
        return job;
    }
    createFetchJob(url, requestInit = {}) {
        return this.fetchFn(url, requestInit).then(async (res)=>{
            let json = void 0;
            let text = void 0;
            if (res.ok) {
                try {
                    json = await res.json();
                } catch  {}
            } else {
                try {
                    text = await res.text();
                    json = JSON.parse(text);
                } catch  {}
            }
            return {
                status: res.status,
                headers: res.headers,
                json,
                text
            };
        });
    }
}
;
 //# sourceMappingURL=BaseClient.js.map
}}),
"[project]/node_modules/@prismicio/client/dist/buildQueryURL.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "buildQueryURL": (()=>buildQueryURL)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$castArray$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/lib/castArray.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$devMsg$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/lib/devMsg.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$package$2e$json$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/package.json.js [app-rsc] (ecmascript)");
;
;
;
const PRISMIC_DEV_PARAM = "x-d";
const PRISMIC_CLIENT_VERSION_PARAM = "x-c";
const RENAMED_PARAMS = {
    accessToken: "access_token"
};
const castOrderingToString = (ordering)=>{
    if (typeof ordering === "string") {
        if ("TURBOPACK compile-time truthy", 1) {
            const [field, direction] = ordering.split(" ");
            const objectForm = direction === "desc" ? `{ field: "${field}", direction: "desc" }` : `{ field: "${field}" }`;
            console.warn(`[@prismicio/client] A string value was provided to the \`orderings\` query parameter. Strings are deprecated. Please convert it to the object form: ${objectForm}. For more details, see ${(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$devMsg$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["devMsg"])("orderings-must-be-an-array-of-objects")}`);
        }
        return ordering;
    }
    return ordering.direction === "desc" ? `${ordering.field} desc` : ordering.field;
};
const buildQueryURL = (endpoint, args)=>{
    const { filters, predicates, ...params } = args;
    const url = new URL(`documents/search`, `${endpoint}/`);
    if (filters) {
        if (("TURBOPACK compile-time value", "development") === "development" && !Array.isArray(filters)) {
            console.warn(`[@prismicio/client] A non-array value was provided to the \`filters\` query parameter (\`${filters}\`). Non-array values are deprecated. Please convert it to an array. For more details, see ${(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$devMsg$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["devMsg"])("filters-must-be-an-array")}`);
        }
        for (const filter of (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$castArray$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["castArray"])(filters)){
            url.searchParams.append("q", `[${filter}]`);
        }
    }
    if (predicates) {
        for (const predicate of (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$castArray$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["castArray"])(predicates)){
            url.searchParams.append("q", `[${predicate}]`);
        }
    }
    for(const k in params){
        const name = RENAMED_PARAMS[k] || k;
        let value = params[k];
        if (name === "orderings") {
            const scopedValue = params[name];
            if (scopedValue != null) {
                if (("TURBOPACK compile-time value", "development") === "development" && typeof scopedValue === "string") {
                    console.warn(`[@prismicio/client] A string value was provided to the \`orderings\` query parameter. Strings are deprecated. Please convert it to an array of objects. For more details, see ${(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$devMsg$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["devMsg"])("orderings-must-be-an-array-of-objects")}`);
                }
                const v = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$castArray$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["castArray"])(scopedValue).map((ordering)=>castOrderingToString(ordering)).join(",");
                value = `[${v}]`;
            }
        } else if (name === "routes") {
            if (typeof params[name] === "object") {
                value = JSON.stringify((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$castArray$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["castArray"])(params[name]));
            }
        }
        if (value != null) {
            url.searchParams.set(name, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$castArray$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["castArray"])(value).join(","));
        }
    }
    url.searchParams.set(PRISMIC_CLIENT_VERSION_PARAM, `js-${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$package$2e$json$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["version"]}`);
    if ("TURBOPACK compile-time truthy", 1) {
        url.searchParams.set(PRISMIC_DEV_PARAM, "1");
    }
    return url.toString();
};
;
 //# sourceMappingURL=buildQueryURL.js.map
}}),
"[project]/node_modules/@prismicio/client/dist/getRepositoryEndpoint.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "getRepositoryEndpoint": (()=>getRepositoryEndpoint)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$PrismicError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/errors/PrismicError.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$isRepositoryName$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/isRepositoryName.js [app-rsc] (ecmascript)");
;
;
const getRepositoryEndpoint = (repositoryName)=>{
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$isRepositoryName$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["isRepositoryName"])(repositoryName)) {
        return `https://${repositoryName}.cdn.prismic.io/api/v2`;
    } else {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$PrismicError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["PrismicError"](`An invalid Prismic repository name was given: ${repositoryName}`, void 0, void 0);
    }
};
;
 //# sourceMappingURL=getRepositoryEndpoint.js.map
}}),
"[project]/node_modules/@prismicio/client/dist/getRepositoryName.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "getRepositoryName": (()=>getRepositoryName)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$PrismicError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/errors/PrismicError.js [app-rsc] (ecmascript)");
;
const getRepositoryName = (repositoryEndpoint)=>{
    try {
        const hostname = new URL(repositoryEndpoint).hostname;
        if (hostname.endsWith("prismic.io") || // Production
        hostname.endsWith("wroom.io") || // Staging
        hostname.endsWith("wroom.test")) {
            return hostname.split(".")[0];
        }
    } catch  {}
    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$PrismicError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["PrismicError"](`An invalid Prismic Document API endpoint was provided: ${repositoryEndpoint}`, void 0, void 0);
};
;
 //# sourceMappingURL=getRepositoryName.js.map
}}),
"[project]/node_modules/@prismicio/client/dist/isRepositoryEndpoint.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "isRepositoryEndpoint": (()=>isRepositoryEndpoint)
});
const isRepositoryEndpoint = (input)=>{
    try {
        new URL(input);
        return true;
    } catch  {
        return false;
    }
};
;
 //# sourceMappingURL=isRepositoryEndpoint.js.map
}}),
"[project]/node_modules/@prismicio/client/dist/Client.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Client": (()=>Client),
    "GET_ALL_QUERY_DELAY": (()=>GET_ALL_QUERY_DELAY),
    "REPOSITORY_CACHE_TTL": (()=>REPOSITORY_CACHE_TTL)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$appendFilters$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/lib/appendFilters.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$castThunk$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/lib/castThunk.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$devMsg$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/lib/devMsg.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$everyTagFilter$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/lib/everyTagFilter.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$findMasterRef$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/lib/findMasterRef.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$findRefByID$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/lib/findRefByID.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$findRefByLabel$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/lib/findRefByLabel.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$getPreviewCookie$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/lib/getPreviewCookie.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$minifyGraphQLQuery$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/lib/minifyGraphQLQuery.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$someTagsFilter$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/lib/someTagsFilter.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$typeFilter$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/lib/typeFilter.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$ForbiddenError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/errors/ForbiddenError.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$NotFoundError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/errors/NotFoundError.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$ParsingError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/errors/ParsingError.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$PreviewTokenExpired$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/errors/PreviewTokenExpired.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$PrismicError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/errors/PrismicError.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$RefExpiredError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/errors/RefExpiredError.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$RefNotFoundError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/errors/RefNotFoundError.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$RepositoryNotFoundError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/errors/RepositoryNotFoundError.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$helpers$2f$asLink$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/helpers/asLink.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$BaseClient$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/BaseClient.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$buildQueryURL$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/buildQueryURL.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$filter$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/filter.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$getRepositoryEndpoint$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/getRepositoryEndpoint.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$getRepositoryName$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/getRepositoryName.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$isRepositoryEndpoint$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/isRepositoryEndpoint.js [app-rsc] (ecmascript)");
var __defProp = Object.defineProperty;
var __typeError = (msg)=>{
    throw TypeError(msg);
};
var __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {
        enumerable: true,
        configurable: true,
        writable: true,
        value
    }) : obj[key] = value;
var __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
var __accessCheck = (obj, member, msg)=>member.has(obj) || __typeError("Cannot " + msg);
var __privateGet = (obj, member, getter)=>(__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateAdd = (obj, member, value)=>member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
var __privateSet = (obj, member, value, setter)=>(__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var _repositoryName;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
const MAX_PAGE_SIZE = 100;
const REPOSITORY_CACHE_TTL = 5e3;
const GET_ALL_QUERY_DELAY = 500;
const DEFUALT_RETRY_AFTER_MS = 1e3;
const MAX_INVALID_REF_RETRY_ATTEMPS = 3;
var RefStateMode;
(function(RefStateMode2) {
    RefStateMode2["Master"] = "Master";
    RefStateMode2["ReleaseID"] = "ReleaseID";
    RefStateMode2["ReleaseLabel"] = "ReleaseLabel";
    RefStateMode2["Manual"] = "Manual";
})(RefStateMode || (RefStateMode = {}));
class Client extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$BaseClient$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["BaseClient"] {
    /**
   * Creates a Prismic client that can be used to query a repository.
   *
   * If used in an environment where a global `fetch` function is unavailable,
   * such as in some Node.js versions, the `fetch` option must be provided as
   * part of the `options` parameter.
   *
   * @param repositoryNameOrEndpoint - The Prismic repository name or full Rest
   *   API V2 endpoint for the repository.
   * @param options - Configuration that determines how content will be queried
   *   from the Prismic repository.
   *
   * @returns A client that can query content from the repository.
   */ constructor(repositoryNameOrEndpoint, options = {}){
        super(options);
        __privateAdd(this, _repositoryName);
        /**
     * The Prismic REST API V2 endpoint for the repository (use
     * `prismic.getRepositoryEndpoint` for the default endpoint).
     */ __publicField(this, "documentAPIEndpoint");
        /**
     * The secure token for accessing the API (only needed if your repository is
     * set to private).
     *
     * {@link https://user-guides.prismic.io/en/articles/1036153-generating-an-access-token}
     */ __publicField(this, "accessToken");
        /**
     * A list of route resolver objects that define how a document's `url` field
     * is resolved.
     *
     * {@link https://prismic.io/docs/route-resolver}
     */ __publicField(this, "routes");
        /**
     * The `brokenRoute` option allows you to define the route populated in the
     * `url` property for broken link or content relationship fields. A broken
     * link is a link or content relationship field whose linked document has been
     * unpublished or deleted.
     *
     * {@link https://prismic.io/docs/route-resolver}
     */ __publicField(this, "brokenRoute");
        /**
     * Default parameters that will be sent with each query. These parameters can
     * be overridden on each query if needed.
     */ __publicField(this, "defaultParams");
        /**
     * The client's ref mode state. This determines which ref is used during
     * queries.
     */ __publicField(this, "refState", {
            mode: RefStateMode.Master,
            autoPreviewsEnabled: true
        });
        /**
     * Cached repository value.
     */ __publicField(this, "cachedRepository");
        /**
     * Timestamp at which the cached repository data is considered stale.
     */ __publicField(this, "cachedRepositoryExpiration", 0);
        if ((options.documentAPIEndpoint || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$isRepositoryEndpoint$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["isRepositoryEndpoint"])(repositoryNameOrEndpoint)) && ("TURBOPACK compile-time value", "development") === "development") {
            const documentAPIEndpoint = options.documentAPIEndpoint || repositoryNameOrEndpoint;
            if (/\.prismic\.io\/(?!api\/v2\/?)/i.test(documentAPIEndpoint)) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$PrismicError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["PrismicError"]("@prismicio/client only supports Prismic Rest API V2. Please provide only the repository name to the first createClient() parameter or use the getRepositoryEndpoint() helper to generate a valid Rest API V2 endpoint URL.", void 0, void 0);
            }
            const hostname = new URL(documentAPIEndpoint).hostname.toLowerCase();
            if (hostname.endsWith(".prismic.io") && !hostname.endsWith(".cdn.prismic.io")) {
                console.warn(`[@prismicio/client] The client was created with a non-CDN endpoint. Convert it to the CDN endpoint for better performance. For more details, see ${(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$devMsg$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["devMsg"])("endpoint-must-use-cdn")}`);
            }
            if (options.documentAPIEndpoint && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$isRepositoryEndpoint$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["isRepositoryEndpoint"])(repositoryNameOrEndpoint) && repositoryNameOrEndpoint !== options.documentAPIEndpoint) {
                console.warn(`[@prismicio/client] Multiple incompatible endpoints were provided. Create the client using a repository name to prevent this error. For more details, see ${(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$devMsg$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["devMsg"])("prefer-repository-name")}`);
            }
        }
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$isRepositoryEndpoint$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["isRepositoryEndpoint"])(repositoryNameOrEndpoint)) {
            this.documentAPIEndpoint = repositoryNameOrEndpoint;
            try {
                this.repositoryName = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$getRepositoryName$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getRepositoryName"])(repositoryNameOrEndpoint);
            } catch (error) {
                console.warn(`[@prismicio/client] A repository name could not be inferred from the provided endpoint (\`${repositoryNameOrEndpoint}\`). Some methods will be disabled. Create the client using a repository name to prevent this warning. For more details, see ${(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$devMsg$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["devMsg"])("prefer-repository-name")}`);
            }
        } else {
            this.documentAPIEndpoint = options.documentAPIEndpoint || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$getRepositoryEndpoint$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getRepositoryEndpoint"])(repositoryNameOrEndpoint);
            this.repositoryName = repositoryNameOrEndpoint;
        }
        this.accessToken = options.accessToken;
        this.routes = options.routes;
        this.brokenRoute = options.brokenRoute;
        this.defaultParams = options.defaultParams;
        if (options.ref) {
            this.queryContentFromRef(options.ref);
        }
        this.graphQLFetch = this.graphQLFetch.bind(this);
    }
    /**
   * The Prismic repository's name.
   */ set repositoryName(value) {
        __privateSet(this, _repositoryName, value);
    }
    /**
   * The Prismic repository's name.
   */ get repositoryName() {
        if (!__privateGet(this, _repositoryName)) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$PrismicError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["PrismicError"](`A repository name is required for this method but one could not be inferred from the provided API endpoint (\`${this.documentAPIEndpoint}\`). To fix this error, provide a repository name when creating the client. For more details, see ${(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$devMsg$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["devMsg"])("prefer-repository-name")}`, void 0, void 0);
        }
        return __privateGet(this, _repositoryName);
    }
    /**
   * The Prismic REST API V2 endpoint for the repository (use
   * `prismic.getRepositoryEndpoint` for the default endpoint).
   *
   * @deprecated Use `documentAPIEndpoint` instead.
   */ // TODO: Remove in v8.
    set endpoint(value) {
        this.documentAPIEndpoint = value;
    }
    /**
   * The Prismic REST API V2 endpoint for the repository (use
   * `prismic.getRepositoryEndpoint` for the default endpoint).
   *
   * @deprecated Use `documentAPIEndpoint` instead.
   */ // TODO: Remove in v8.
    get endpoint() {
        return this.documentAPIEndpoint;
    }
    /**
   * Enables the client to automatically query content from a preview session if
   * one is active in browser environments. This is enabled by default in the
   * browser.
   *
   * For server environments, use `enableAutoPreviewsFromReq`.
   *
   * @example
   *
   * ```ts
   * client.enableAutoPreviews()
   * ```
   *
   * @see enableAutoPreviewsFromReq
   */ enableAutoPreviews() {
        this.refState.autoPreviewsEnabled = true;
    }
    /**
   * Enables the client to automatically query content from a preview session if
   * one is active in server environments. This is disabled by default on the
   * server.
   *
   * For browser environments, use `enableAutoPreviews`.
   *
   * @example
   *
   * ```ts
   * // In an express app
   * app.get("/", function (req, res) {
   * 	client.enableAutoPreviewsFromReq(req)
   * })
   * ```
   *
   * @param req - An HTTP server request object containing the request's
   *   cookies.
   */ enableAutoPreviewsFromReq(req) {
        this.refState.httpRequest = req;
        this.refState.autoPreviewsEnabled = true;
    }
    /**
   * Disables the client from automatically querying content from a preview
   * session if one is active.
   *
   * Automatic preview content querying is enabled by default unless this method
   * is called.
   *
   * @example
   *
   * ```ts
   * client.disableAutoPreviews()
   * ```
   */ disableAutoPreviews() {
        this.refState.autoPreviewsEnabled = false;
    }
    /**
   * Queries content from the Prismic repository.
   *
   * @example
   *
   * ```ts
   * const response = await client.get()
   * ```
   *
   * @typeParam TDocument - Type of Prismic documents returned.
   *
   * @param params - Parameters to filter, sort, and paginate results.
   *
   * @returns A paginated response containing the result of the query.
   */ async get(params) {
        const { data } = await this._get(params);
        return data;
    }
    /**
   * Queries content from the Prismic repository and returns only the first
   * result, if any.
   *
   * @example
   *
   * ```ts
   * const document = await client.getFirst()
   * ```
   *
   * @typeParam TDocument - Type of the Prismic document returned.
   *
   * @param params - Parameters to filter, sort, and paginate results.
   *
   * @returns The first result of the query, if any.
   */ async getFirst(params) {
        var _a;
        const actualParams = {
            ...params
        };
        if (!(params && params.page) && !(params == null ? void 0 : params.pageSize)) {
            actualParams.pageSize = ((_a = this.defaultParams) == null ? void 0 : _a.pageSize) ?? 1;
        }
        const { data, url } = await this._get(actualParams);
        const firstResult = data.results[0];
        if (firstResult) {
            return firstResult;
        }
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$NotFoundError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["NotFoundError"]("No documents were returned", url, void 0);
    }
    /**
   * **IMPORTANT**: Avoid using `dangerouslyGetAll` as it may be slower and
   * require more resources than other methods. Prefer using other methods that
   * filter by filters such as `getAllByType`.
   *
   * Queries content from the Prismic repository and returns all matching
   * content. If no filters are provided, all documents will be fetched.
   *
   * This method may make multiple network requests to query all matching
   * content.
   *
   * @example
   *
   * ```ts
   * const response = await client.dangerouslyGetAll()
   * ```
   *
   * @typeParam TDocument - Type of Prismic documents returned.
   *
   * @param params - Parameters to filter, sort, and paginate results.
   *
   * @returns A list of documents matching the query.
   */ async dangerouslyGetAll(params = {}) {
        var _a;
        const { limit = Infinity, ...actualParams } = params;
        const resolvedParams = {
            ...actualParams,
            pageSize: Math.min(limit, actualParams.pageSize || ((_a = this.defaultParams) == null ? void 0 : _a.pageSize) || MAX_PAGE_SIZE)
        };
        const documents = [];
        let latestResult;
        while((!latestResult || latestResult.next_page) && documents.length < limit){
            const page = latestResult ? latestResult.page + 1 : void 0;
            latestResult = await this.get({
                ...resolvedParams,
                page
            });
            documents.push(...latestResult.results);
            if (latestResult.next_page) {
                await new Promise((res)=>setTimeout(res, GET_ALL_QUERY_DELAY));
            }
        }
        return documents.slice(0, limit);
    }
    /**
   * Queries a document from the Prismic repository with a specific ID.
   *
   * @remarks
   * A document's UID is different from its ID. An ID is automatically generated
   * for all documents and is made available on its `id` property. A UID is
   * provided in the Prismic editor and is unique among all documents of its
   * custom type.
   *
   * @example
   *
   * ```ts
   * const document = await client.getByID("WW4bKScAAMAqmluX")
   * ```
   *
   * @typeParam TDocument- Type of the Prismic document returned.
   *
   * @param id - ID of the document.
   * @param params - Parameters to filter, sort, and paginate the results.
   *
   * @returns The document with an ID matching the `id` parameter, if a matching
   *   document exists.
   */ async getByID(id, params) {
        return await this.getFirst((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$appendFilters$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["appendFilters"])(params, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$filter$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["filter"].at("document.id", id)));
    }
    /**
   * Queries documents from the Prismic repository with specific IDs.
   *
   * @remarks
   * A document's UID is different from its ID. An ID is automatically generated
   * for all documents and is made available on its `id` property. A UID is
   * provided in the Prismic editor and is unique among all documents of its
   * custom type.
   *
   * @example
   *
   * ```ts
   * const response = await client.getByIDs([
   * 	"WW4bKScAAMAqmluX",
   * 	"U1kTRgEAAC8A5ldS",
   * ])
   * ```
   *
   * @typeParam TDocument - Type of Prismic documents returned.
   *
   * @param ids - A list of document IDs.
   * @param params - Parameters to filter, sort, and paginate the results.
   *
   * @returns A paginated response containing documents with IDs matching the
   *   `ids` parameter.
   */ async getByIDs(ids, params) {
        return await this.get((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$appendFilters$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["appendFilters"])(params, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$filter$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["filter"].in("document.id", ids)));
    }
    /**
   * Queries all documents from the Prismic repository with specific IDs.
   *
   * This method may make multiple network requests to query all matching
   * content.
   *
   * @remarks
   * A document's UID is different from its ID. An ID is automatically generated
   * for all documents and is made available on its `id` property. A UID is
   * provided in the Prismic editor and is unique among all documents of its
   * custom type.
   *
   * @example
   *
   * ```ts
   * const response = await client.getAllByIDs([
   * 	"WW4bKScAAMAqmluX",
   * 	"U1kTRgEAAC8A5ldS",
   * ])
   * ```
   *
   * @typeParam TDocument - Type of Prismic documents returned.
   *
   * @param ids - A list of document IDs.
   * @param params - Parameters to filter, sort, and paginate the results.
   *
   * @returns A list of documents with IDs matching the `ids` parameter.
   */ async getAllByIDs(ids, params) {
        return await this.dangerouslyGetAll((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$appendFilters$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["appendFilters"])(params, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$filter$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["filter"].in("document.id", ids)));
    }
    /**
   * Queries a document from the Prismic repository with a specific UID and
   * custom type.
   *
   * @remarks
   * A document's UID is different from its ID. An ID is automatically generated
   * for all documents and is made available on its `id` property. A UID is
   * provided in the Prismic editor and is unique among all documents of its
   * custom type.
   *
   * @example
   *
   * ```ts
   * const document = await client.getByUID("blog_post", "my-first-post")
   * ```
   *
   * @typeParam TDocument - Type of the Prismic document returned.
   *
   * @param documentType - The API ID of the document's custom type.
   * @param uid - UID of the document.
   * @param params - Parameters to filter, sort, and paginate the results.
   *
   * @returns The document with a UID matching the `uid` parameter, if a
   *   matching document exists.
   */ async getByUID(documentType, uid, params) {
        return await this.getFirst((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$appendFilters$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["appendFilters"])(params, [
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$typeFilter$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["typeFilter"])(documentType),
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$filter$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["filter"].at(`my.${documentType}.uid`, uid)
        ]));
    }
    /**
   * Queries document from the Prismic repository with specific UIDs and Custom
   * Type.
   *
   * @remarks
   * A document's UID is different from its ID. An ID is automatically generated
   * for all documents and is made available on its `id` property. A UID is
   * provided in the Prismic editor and is unique among all documents of its
   * custom type.
   *
   * @example
   *
   * ```ts
   * const document = await client.getByUIDs("blog_post", [
   * 	"my-first-post",
   * 	"my-second-post",
   * ])
   * ```
   *
   * @typeParam TDocument - Type of the Prismic document returned.
   *
   * @param documentType - The API ID of the document's custom type.
   * @param uids - A list of document UIDs.
   * @param params - Parameters to filter, sort, and paginate the results.
   *
   * @returns A paginated response containing documents with UIDs matching the
   *   `uids` parameter.
   */ async getByUIDs(documentType, uids, params) {
        return await this.get((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$appendFilters$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["appendFilters"])(params, [
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$typeFilter$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["typeFilter"])(documentType),
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$filter$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["filter"].in(`my.${documentType}.uid`, uids)
        ]));
    }
    /**
   * Queries all documents from the Prismic repository with specific UIDs and
   * custom type.
   *
   * This method may make multiple network requests to query all matching
   * content.
   *
   * @remarks
   * A document's UID is different from its ID. An ID is automatically generated
   * for all documents and is made available on its `id` property. A UID is
   * provided in the Prismic editor and is unique among all documents of its
   * custom type.
   *
   * @example
   *
   * ```ts
   * const response = await client.getAllByUIDs([
   * 	"my-first-post",
   * 	"my-second-post",
   * ])
   * ```
   *
   * @typeParam TDocument - Type of Prismic documents returned.
   *
   * @param documentType - The API ID of the document's custom type.
   * @param uids - A list of document UIDs.
   * @param params - Parameters to filter, sort, and paginate the results.
   *
   * @returns A list of documents with UIDs matching the `uids` parameter.
   */ async getAllByUIDs(documentType, uids, params) {
        return await this.dangerouslyGetAll((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$appendFilters$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["appendFilters"])(params, [
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$typeFilter$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["typeFilter"])(documentType),
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$filter$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["filter"].in(`my.${documentType}.uid`, uids)
        ]));
    }
    /**
   * Queries a singleton document from the Prismic repository for a specific
   * custom type.
   *
   * @remarks
   * A singleton document is one that is configured in Prismic to only allow one
   * instance. For example, a repository may be configured to contain just one
   * Settings document. This is in contrast to a repeatable custom type which
   * allows multiple instances of itself.
   *
   * @example
   *
   * ```ts
   * const document = await client.getSingle("settings")
   * ```
   *
   * @typeParam TDocument - Type of the Prismic document returned.
   *
   * @param documentType - The API ID of the singleton custom type.
   * @param params - Parameters to filter, sort, and paginate the results.
   *
   * @returns The singleton document for the custom type, if a matching document
   *   exists.
   */ async getSingle(documentType, params) {
        return await this.getFirst((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$appendFilters$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["appendFilters"])(params, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$typeFilter$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["typeFilter"])(documentType)));
    }
    /**
   * Queries documents from the Prismic repository for a specific custom type.
   *
   * Use `getAllByType` instead if you need to query all documents for a
   * specific custom type.
   *
   * @example
   *
   * ```ts
   * const response = await client.getByType("blog_post")
   * ```
   *
   * @typeParam TDocument - Type of Prismic documents returned.
   *
   * @param documentType - The API ID of the custom type.
   * @param params - Parameters to filter, sort, and paginate the results.
   *
   * @returns A paginated response containing documents of the custom type.
   */ async getByType(documentType, params) {
        return await this.get((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$appendFilters$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["appendFilters"])(params, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$typeFilter$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["typeFilter"])(documentType)));
    }
    /**
   * Queries all documents from the Prismic repository for a specific Custom
   * Type.
   *
   * This method may make multiple network requests to query all matching
   * content.
   *
   * @example
   *
   * ```ts
   * const response = await client.getByType("blog_post")
   * ```
   *
   * @typeParam TDocument - Type of Prismic documents returned.
   *
   * @param documentType - The API ID of the custom type.
   * @param params - Parameters to filter, sort, and paginate the results.
   *
   * @returns A list of all documents of the custom type.
   */ async getAllByType(documentType, params) {
        return await this.dangerouslyGetAll((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$appendFilters$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["appendFilters"])(params, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$typeFilter$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["typeFilter"])(documentType)));
    }
    /**
   * Queries documents from the Prismic repository with a specific tag.
   *
   * Use `getAllByTag` instead if you need to query all documents with a
   * specific tag.
   *
   * @example
   *
   * ```ts
   * const response = await client.getByTag("food")
   * ```
   *
   * @typeParam TDocument - Type of Prismic documents returned.
   *
   * @param tag - The tag that must be included on a document.
   * @param params - Parameters to filter, sort, and paginate the results.
   *
   * @returns A paginated response containing documents with the tag.
   */ async getByTag(tag, params) {
        return await this.get((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$appendFilters$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["appendFilters"])(params, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$someTagsFilter$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["someTagsFilter"])(tag)));
    }
    /**
   * Queries all documents from the Prismic repository with a specific tag.
   *
   * This method may make multiple network requests to query all matching
   * content.
   *
   * @example
   *
   * ```ts
   * const response = await client.getAllByTag("food")
   * ```
   *
   * @typeParam TDocument - Type of Prismic documents returned.
   *
   * @param tag - The tag that must be included on a document.
   * @param params - Parameters to filter, sort, and paginate the results.
   *
   * @returns A list of all documents with the tag.
   */ async getAllByTag(tag, params) {
        return await this.dangerouslyGetAll((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$appendFilters$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["appendFilters"])(params, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$someTagsFilter$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["someTagsFilter"])(tag)));
    }
    /**
   * Queries documents from the Prismic repository with specific tags. A
   * document must be tagged with all of the queried tags to be included.
   *
   * @example
   *
   * ```ts
   * const response = await client.getByEveryTag(["food", "fruit"])
   * ```
   *
   * @typeParam TDocument - Type of Prismic documents returned.
   *
   * @param tags - A list of tags that must be included on a document.
   * @param params - Parameters to filter, sort, and paginate the results.
   *
   * @returns A paginated response containing documents with the tags.
   */ async getByEveryTag(tags, params) {
        return await this.get((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$appendFilters$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["appendFilters"])(params, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$everyTagFilter$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["everyTagFilter"])(tags)));
    }
    /**
   * Queries documents from the Prismic repository with specific tags. A
   * document must be tagged with all of the queried tags to be included.
   *
   * This method may make multiple network requests to query all matching
   * content.
   *
   * @example
   *
   * ```ts
   * const response = await client.getAllByEveryTag(["food", "fruit"])
   * ```
   *
   * @typeParam TDocument - Type of Prismic documents returned.
   *
   * @param tags - A list of tags that must be included on a document.
   * @param params - Parameters to filter, sort, and paginate the results.
   *
   * @returns A list of all documents with the tags.
   */ async getAllByEveryTag(tags, params) {
        return await this.dangerouslyGetAll((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$appendFilters$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["appendFilters"])(params, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$everyTagFilter$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["everyTagFilter"])(tags)));
    }
    /**
   * Queries documents from the Prismic repository with specific tags. A
   * document must be tagged with at least one of the queried tags to be
   * included.
   *
   * @example
   *
   * ```ts
   * const response = await client.getByEveryTag(["food", "fruit"])
   * ```
   *
   * @typeParam TDocument - Type of Prismic documents returned.
   *
   * @param tags - A list of tags that must be included on a document.
   * @param params - Parameters to filter, sort, and paginate the results.
   *
   * @returns A paginated response containing documents with at least one of the
   *   tags.
   */ async getBySomeTags(tags, params) {
        return await this.get((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$appendFilters$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["appendFilters"])(params, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$someTagsFilter$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["someTagsFilter"])(tags)));
    }
    /**
   * Queries documents from the Prismic repository with specific tags. A
   * document must be tagged with at least one of the queried tags to be
   * included.
   *
   * This method may make multiple network requests to query all matching
   * content.
   *
   * @example
   *
   * ```ts
   * const response = await client.getAllBySomeTags(["food", "fruit"])
   * ```
   *
   * @typeParam TDocument - Type of Prismic documents returned.
   *
   * @param tags - A list of tags that must be included on a document.
   * @param params - Parameters to filter, sort, and paginate the results.
   *
   * @returns A list of all documents with at least one of the tags.
   */ async getAllBySomeTags(tags, params) {
        return await this.dangerouslyGetAll((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$appendFilters$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["appendFilters"])(params, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$someTagsFilter$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["someTagsFilter"])(tags)));
    }
    /**
   * Returns metadata about the Prismic repository, such as its refs, releases,
   * and custom types.
   *
   * @returns Repository metadata.
   */ async getRepository(params) {
        const url = new URL(this.documentAPIEndpoint);
        if (this.accessToken) {
            url.searchParams.set("access_token", this.accessToken);
        }
        return await this.fetch(url.toString(), params);
    }
    /**
   * Returns a list of all refs for the Prismic repository.
   *
   * Refs are used to identify which version of the repository's content should
   * be queried. All repositories will have at least one ref pointing to the
   * latest published content called the "master ref".
   *
   * @returns A list of all refs for the Prismic repository.
   */ async getRefs(params) {
        const repository = await this.getRepository(params);
        return repository.refs;
    }
    /**
   * Returns a ref for the Prismic repository with a matching ID.
   *
   * @param id - ID of the ref.
   *
   * @returns The ref with a matching ID, if it exists.
   */ async getRefByID(id, params) {
        const refs = await this.getRefs(params);
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$findRefByID$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["findRefByID"])(refs, id);
    }
    /**
   * Returns a ref for the Prismic repository with a matching label.
   *
   * @param label - Label of the ref.
   *
   * @returns The ref with a matching label, if it exists.
   */ async getRefByLabel(label, params) {
        const refs = await this.getRefs(params);
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$findRefByLabel$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["findRefByLabel"])(refs, label);
    }
    /**
   * Returns the master ref for the Prismic repository. The master ref points to
   * the repository's latest published content.
   *
   * @returns The repository's master ref.
   */ async getMasterRef(params) {
        const refs = await this.getRefs(params);
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$findMasterRef$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["findMasterRef"])(refs);
    }
    /**
   * Returns a list of all Releases for the Prismic repository. Releases are
   * used to group content changes before publishing.
   *
   * @returns A list of all Releases for the Prismic repository.
   */ async getReleases(params) {
        const refs = await this.getRefs(params);
        return refs.filter((ref)=>!ref.isMasterRef);
    }
    /**
   * Returns a Release for the Prismic repository with a matching ID.
   *
   * @param id - ID of the Release.
   *
   * @returns The Release with a matching ID, if it exists.
   */ async getReleaseByID(id, params) {
        const releases = await this.getReleases(params);
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$findRefByID$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["findRefByID"])(releases, id);
    }
    /**
   * Returns a Release for the Prismic repository with a matching label.
   *
   * @param label - Label of the ref.
   *
   * @returns The ref with a matching label, if it exists.
   */ async getReleaseByLabel(label, params) {
        const releases = await this.getReleases(params);
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$findRefByLabel$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["findRefByLabel"])(releases, label);
    }
    /**
   * Returns a list of all tags used in the Prismic repository.
   *
   * @returns A list of all tags used in the repository.
   */ async getTags(params) {
        try {
            const tagsForm = await this.getCachedRepositoryForm("tags", params);
            const url = new URL(tagsForm.action);
            if (this.accessToken) {
                url.searchParams.set("access_token", this.accessToken);
            }
            return await this.fetch(url.toString(), params);
        } catch  {
            const repository = await this.getRepository(params);
            return repository.tags;
        }
    }
    /**
   * Builds a URL used to query content from the Prismic repository.
   *
   * @param params - Parameters to filter, sort, and paginate the results.
   *
   * @returns A URL string that can be requested to query content.
   */ async buildQueryURL({ signal, fetchOptions, ...params } = {}) {
        const ref = params.ref || await this.getResolvedRefString({
            signal,
            fetchOptions
        });
        const integrationFieldsRef = params.integrationFieldsRef || (await this.getCachedRepository({
            signal,
            fetchOptions
        })).integrationFieldsRef || void 0;
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$buildQueryURL$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildQueryURL"])(this.documentAPIEndpoint, {
            ...this.defaultParams,
            ...params,
            ref,
            integrationFieldsRef,
            routes: params.routes || this.routes,
            brokenRoute: params.brokenRoute || this.brokenRoute,
            accessToken: params.accessToken || this.accessToken
        });
    }
    /**
   * Determines the URL for a previewed document during an active preview
   * session. The result of this method should be used to redirect the user to
   * the document's URL.
   *
   * @example
   *
   * ```ts
   * 	const url = client.resolvePreviewURL({
   * 	linkResolver: (document) => `/${document.uid}`
   * 	defaultURL: '/'
   * 	})
   * ```
   *
   * @param args - Arguments to configure the URL resolving.
   *
   * @returns The URL for the previewed document during an active preview
   *   session. The user should be redirected to this URL.
   */ async resolvePreviewURL(args) {
        var _a, _b;
        let documentID = args.documentID;
        let previewToken = args.previewToken;
        if (typeof globalThis.location !== "undefined") {
            const searchParams = new URLSearchParams(globalThis.location.search);
            documentID = documentID || searchParams.get("documentId");
            previewToken = previewToken || searchParams.get("token");
        } else if (this.refState.httpRequest) {
            if ("query" in this.refState.httpRequest) {
                documentID = documentID || ((_a = this.refState.httpRequest.query) == null ? void 0 : _a.documentId);
                previewToken = previewToken || ((_b = this.refState.httpRequest.query) == null ? void 0 : _b.token);
            } else if ("url" in this.refState.httpRequest && this.refState.httpRequest.url) {
                const searchParams = new URL(this.refState.httpRequest.url, "missing-host://").searchParams;
                documentID = documentID || searchParams.get("documentId");
                previewToken = previewToken || searchParams.get("token");
            }
        }
        if (documentID != null && previewToken != null) {
            const document = await this.getByID(documentID, {
                ref: previewToken,
                lang: "*",
                signal: args.signal,
                fetchOptions: args.fetchOptions
            });
            const url = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$helpers$2f$asLink$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["asLink"])(document, {
                linkResolver: args.linkResolver
            });
            if (typeof url === "string") {
                return url;
            }
        }
        return args.defaultURL;
    }
    /**
   * Configures the client to query the latest published content for all future
   * queries.
   *
   * If the `ref` parameter is provided during a query, it takes priority for
   * that query.
   *
   * @example
   *
   * ```ts
   * await client.queryLatestContent()
   * const document = await client.getByID("WW4bKScAAMAqmluX")
   * ```
   */ queryLatestContent() {
        this.refState.mode = RefStateMode.Master;
    }
    /**
   * Configures the client to query content from a specific Release identified
   * by its ID for all future queries.
   *
   * If the `ref` parameter is provided during a query, it takes priority for
   * that query.
   *
   * @example
   *
   * ```ts
   * await client.queryContentFromReleaseByID("YLB7OBAAACMA7Cpa")
   * const document = await client.getByID("WW4bKScAAMAqmluX")
   * ```
   *
   * @param releaseID - The ID of the Release.
   */ queryContentFromReleaseByID(releaseID) {
        this.refState = {
            ...this.refState,
            mode: RefStateMode.ReleaseID,
            releaseID
        };
    }
    /**
   * Configures the client to query content from a specific Release identified
   * by its label for all future queries.
   *
   * If the `ref` parameter is provided during a query, it takes priority for
   * that query.
   *
   * @example
   *
   * ```ts
   * await client.queryContentFromReleaseByLabel("My Release")
   * const document = await client.getByID("WW4bKScAAMAqmluX")
   * ```
   *
   * @param releaseLabel - The label of the Release.
   */ queryContentFromReleaseByLabel(releaseLabel) {
        this.refState = {
            ...this.refState,
            mode: RefStateMode.ReleaseLabel,
            releaseLabel
        };
    }
    /**
   * Configures the client to query content from a specific ref. The ref can be
   * provided as a string or a function.
   *
   * If a function is provided, the ref is fetched lazily before each query. The
   * function may also be asynchronous.
   *
   * @example
   *
   * ```ts
   * await client.queryContentFromRef("my-ref")
   * const document = await client.getByID("WW4bKScAAMAqmluX")
   * ```
   *
   * @param ref - The ref or a function that returns the ref from which to query
   *   content.
   */ queryContentFromRef(ref) {
        this.refState = {
            ...this.refState,
            mode: RefStateMode.Manual,
            ref
        };
    }
    /**
   * A `fetch()` function to be used with GraphQL clients configured for
   * Prismic's GraphQL API. It automatically applies the necessary `prismic-ref`
   * and Authorization headers. Queries will automatically be minified by
   * removing whitespace where possible.
   *
   * @example
   *
   * ```ts
   * const graphQLClient = new ApolloClient({
   * 	link: new HttpLink({
   * 		uri: prismic.getGraphQLEndpoint(repositoryName),
   * 		// Provide `client.graphQLFetch` as the fetch implementation.
   * 		fetch: client.graphQLFetch,
   * 		// Using GET is required.
   * 		useGETForQueries: true,
   * 	}),
   * 	cache: new InMemoryCache(),
   * })
   * ```
   *
   * @param input - The `fetch()` `input` parameter. Only strings are supported.
   * @param init - The `fetch()` `init` parameter. Only plain objects are
   *   supported.
   *
   * @returns The `fetch()` Response for the request.
   *
   * @experimental
   */ async graphQLFetch(input, init) {
        const cachedRepository = await this.getCachedRepository();
        const ref = await this.getResolvedRefString();
        const unsanitizedHeaders = {
            "Prismic-ref": ref,
            Authorization: this.accessToken ? `Token ${this.accessToken}` : "",
            // Asserting `init.headers` is a Record since popular GraphQL
            // libraries pass this as a Record. Header objects as input
            // are unsupported.
            ...init ? init.headers : {}
        };
        if (cachedRepository.integrationFieldsRef) {
            unsanitizedHeaders["Prismic-integration-field-ref"] = cachedRepository.integrationFieldsRef;
        }
        const headers = {};
        for(const key in unsanitizedHeaders){
            if (unsanitizedHeaders[key]) {
                headers[key.toLowerCase()] = unsanitizedHeaders[key];
            }
        }
        const url = new URL(// Asserting `input` is a string since popular GraphQL
        // libraries pass this as a string. Request objects as
        // input are unsupported.
        input);
        url.searchParams.set("ref", ref);
        const query = url.searchParams.get("query");
        if (query) {
            url.searchParams.set("query", // Compress the GraphQL query (if it exists) by
            // removing whitespace. This is done to
            // optimize the query size and avoid
            // hitting the upper limit of GET requests
            // (2048 characters).
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$minifyGraphQLQuery$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["minifyGraphQLQuery"])(query));
        }
        return await this.fetchFn(url.toString(), {
            ...init,
            headers
        });
    }
    /**
   * Returns a cached version of `getRepository` with a TTL.
   *
   * @returns Cached repository metadata.
   */ async getCachedRepository(params) {
        if (!this.cachedRepository || Date.now() >= this.cachedRepositoryExpiration) {
            this.cachedRepositoryExpiration = Date.now() + REPOSITORY_CACHE_TTL;
            this.cachedRepository = await this.getRepository(params);
        }
        return this.cachedRepository;
    }
    /**
   * Returns a cached Prismic repository form. Forms are used to determine API
   * endpoints for types of repository data.
   *
   * @param name - Name of the form.
   *
   * @returns The repository form.
   *
   * @throws If a matching form cannot be found.
   */ async getCachedRepositoryForm(name, params) {
        const cachedRepository = await this.getCachedRepository(params);
        const form = cachedRepository.forms[name];
        if (!form) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$PrismicError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["PrismicError"](`Form with name "${name}" could not be found`, void 0, void 0);
        }
        return form;
    }
    /**
   * Returns the ref needed to query based on the client's current state. This
   * method may make a network request to fetch a ref or resolve the user's ref
   * thunk.
   *
   * If auto previews are enabled, the preview ref takes priority if available.
   *
   * The following strategies are used depending on the client's state:
   *
   * - If the user called `queryLatestContent`: Use the repository's master ref.
   *   The ref is cached for 5 seconds. After 5 seconds, a new master ref is
   *   fetched.
   * - If the user called `queryContentFromReleaseByID`: Use the release's ref.
   *   The ref is cached for 5 seconds. After 5 seconds, a new ref for the
   *   release is fetched.
   * - If the user called `queryContentFromReleaseByLabel`: Use the release's ref.
   *   The ref is cached for 5 seconds. After 5 seconds, a new ref for the
   *   release is fetched.
   * - If the user called `queryContentFromRef`: Use the provided ref. Fall back
   *   to the master ref if the ref is not a string.
   *
   * @returns The ref to use during a query.
   */ async getResolvedRefString(params) {
        var _a, _b;
        if (this.refState.autoPreviewsEnabled) {
            let previewRef;
            let cookieJar;
            if ((_a = this.refState.httpRequest) == null ? void 0 : _a.headers) {
                if ("get" in this.refState.httpRequest.headers && typeof this.refState.httpRequest.headers.get === "function") {
                    cookieJar = this.refState.httpRequest.headers.get("cookie");
                } else if ("cookie" in this.refState.httpRequest.headers) {
                    cookieJar = this.refState.httpRequest.headers.cookie;
                }
            } else if ((_b = globalThis.document) == null ? void 0 : _b.cookie) {
                cookieJar = globalThis.document.cookie;
            }
            if (cookieJar) {
                previewRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$getPreviewCookie$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getPreviewCookie"])(cookieJar);
            }
            if (previewRef) {
                return previewRef;
            }
        }
        const cachedRepository = await this.getCachedRepository(params);
        const refModeType = this.refState.mode;
        if (refModeType === RefStateMode.ReleaseID) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$findRefByID$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["findRefByID"])(cachedRepository.refs, this.refState.releaseID).ref;
        } else if (refModeType === RefStateMode.ReleaseLabel) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$findRefByLabel$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["findRefByLabel"])(cachedRepository.refs, this.refState.releaseLabel).ref;
        } else if (refModeType === RefStateMode.Manual) {
            const res = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$castThunk$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["castThunk"])(this.refState.ref)();
            if (typeof res === "string") {
                return res;
            }
        }
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$lib$2f$findMasterRef$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["findMasterRef"])(cachedRepository.refs).ref;
    }
    /**
   * The private implementation of `this.get`. It returns the API response and
   * the URL used to make the request. The URL is sometimes used in the public
   * method to include in thrown errors.
   *
   * This method retries requests that throw `RefNotFoundError` or
   * `RefExpiredError`. It contains special logic to retry with the latest
   * master ref, provided in the API's error message.
   *
   * @typeParam TDocument - Type of Prismic documents returned.
   *
   * @param params - Parameters to filter, sort, and paginate results.
   *
   * @returns An object containing the paginated response containing the result
   *   of the query and the URL used to make the API request.
   */ async _get(params, attemptCount = 0) {
        var _a, _b;
        const url = await this.buildQueryURL(params);
        try {
            const data = await this.fetch(url, params);
            return {
                data,
                url
            };
        } catch (error) {
            if (!(error instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$RefNotFoundError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["RefNotFoundError"] || error instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$RefExpiredError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["RefExpiredError"]) || attemptCount >= MAX_INVALID_REF_RETRY_ATTEMPS - 1) {
                throw error;
            }
            if (!(params == null ? void 0 : params.ref)) {
                this.cachedRepository = void 0;
            }
            const masterRef = (_b = (_a = error.message.match(/Master ref is: (?<ref>.*)$/)) == null ? void 0 : _a.groups) == null ? void 0 : _b.ref;
            if (!masterRef) {
                throw error;
            }
            const badRef = new URL(url).searchParams.get("ref");
            const issue = error instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$RefNotFoundError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["RefNotFoundError"] ? "invalid" : "expired";
            console.warn(`The ref (${badRef}) was ${issue}. Now retrying with the latest master ref (${masterRef}). If you were previewing content, the response will not include draft content.`);
            return await this._get({
                ...params,
                ref: masterRef
            }, attemptCount + 1);
        }
    }
    /**
   * Performs a network request using the configured `fetch` function. It
   * assumes all successful responses will have a JSON content type. It also
   * normalizes unsuccessful network requests.
   *
   * @typeParam T - The JSON response.
   *
   * @param url - URL to the resource to fetch.
   * @param params - Prismic REST API parameters for the network request.
   *
   * @returns The JSON response from the network request.
   */ async fetch(url, params = {}) {
        const res = await super.fetch(url, params);
        if (res.status !== 404 && res.status !== 429 && res.json == null) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$PrismicError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["PrismicError"](void 0, url, res.json || res.text);
        }
        switch(res.status){
            case 200:
            case 201:
                {
                    return res.json;
                }
            case 400:
                {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$ParsingError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ParsingError"](res.json.message, url, res.json);
                }
            case 401:
            case 403:
                {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$ForbiddenError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ForbiddenError"](res.json.error || res.json.message, url, res.json);
                }
            case 404:
                {
                    if (res.json === void 0) {
                        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$RepositoryNotFoundError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["RepositoryNotFoundError"](`Prismic repository not found. Check that "${this.documentAPIEndpoint}" is pointing to the correct repository.`, url, url.startsWith(this.documentAPIEndpoint) ? void 0 : res.text);
                    }
                    if (res.json.type === "api_notfound_error") {
                        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$RefNotFoundError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["RefNotFoundError"](res.json.message, url, res.json);
                    }
                    if (res.json.type === "api_security_error" && /preview token.*expired/i.test(res.json.message)) {
                        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$PreviewTokenExpired$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["PreviewTokenExpiredError"](res.json.message, url, res.json);
                    }
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$NotFoundError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["NotFoundError"](res.json.message, url, res.json);
                }
            case 410:
                {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$RefExpiredError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["RefExpiredError"](res.json.message, url, res.json);
                }
            case 429:
                {
                    const parsedRetryAfter = Number(res.headers.get("retry-after"));
                    const delay = Number.isNaN(parsedRetryAfter) ? DEFUALT_RETRY_AFTER_MS : parsedRetryAfter;
                    return await new Promise((resolve, reject)=>{
                        setTimeout(async ()=>{
                            try {
                                resolve(await this.fetch(url, params));
                            } catch (error) {
                                reject(error);
                            }
                        }, delay);
                    });
                }
        }
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$errors$2f$PrismicError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["PrismicError"](void 0, url, res.json);
    }
}
_repositoryName = new WeakMap();
;
 //# sourceMappingURL=Client.js.map
}}),
"[project]/node_modules/@prismicio/client/dist/createClient.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createClient": (()=>createClient)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$Client$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/Client.js [app-rsc] (ecmascript)");
;
const createClient = (repositoryNameOrEndpoint, options)=>new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$Client$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Client"](repositoryNameOrEndpoint, options);
;
 //# sourceMappingURL=createClient.js.map
}}),
"[project]/node_modules/@prismicio/client/dist/cookie.js [app-rsc] (ecmascript) <export * as cookie>": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "cookie": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$cookie$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$cookie$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/cookie.js [app-rsc] (ecmascript)");
}}),
"[project]/node_modules/@prismicio/next/dist/enableAutoPreviews.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "enableAutoPreviews": (()=>enableAutoPreviews)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$cookie$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__cookie$3e$__ = __turbopack_context__.i("[project]/node_modules/@prismicio/client/dist/cookie.js [app-rsc] (ecmascript) <export * as cookie>");
;
function enableAutoPreviews(config) {
    config.client.queryContentFromRef(async ()=>{
        var _a;
        const { cookies, draftMode } = await __turbopack_context__.r("[project]/node_modules/next/headers.js [app-rsc] (ecmascript, async loader)")(__turbopack_context__.i);
        let isDraftModeEnabled = false;
        try {
            isDraftModeEnabled = (await draftMode()).isEnabled;
        } catch  {
            return;
        }
        if (!isDraftModeEnabled) {
            return;
        }
        const cookie$1 = (_a = (await cookies()).get(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prismicio$2f$client$2f$dist$2f$cookie$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__cookie$3e$__["cookie"].preview)) == null ? void 0 : _a.value;
        if (!cookie$1) {
            return;
        }
        const isActiveCookie = cookie$1.includes("websitePreviewId=");
        if (!isActiveCookie) {
            return;
        }
        return cookie$1;
    });
}
;
 //# sourceMappingURL=enableAutoPreviews.js.map
}}),

};

//# sourceMappingURL=node_modules_6b8cfc60._.js.map